#!/bin/bash
# Nickel Liang (zuodong2@illinois.edu), March 2020.

### SETTINGS ###
# Put the firmware source file directorie here
SRC_PATH="../source/fw"

# Put the vivado path here
VIVADO_PATH="../vivado"

### FUNCTIONS ###
echo_dir() {
    echo -e "\t\t<link>" >> ${XML_FILE}
    echo -e "\t\t\t<name>src/${FW_DIR}${1}</name>" >> ${XML_FILE}
    echo -e "\t\t\t<type>2</type>" >> ${XML_FILE}
    echo -e "\t\t\t<locationURI>virtual:/virtual</locationURI>" >> ${XML_FILE}
    echo -e "\t\t</link>" >> ${XML_FILE}
}

echo_file() {
    echo -e "\t\t<link>" >> ${XML_FILE}
    echo -e "\t\t\t<name>src/${FW_DIR}${1}</name>" >> ${XML_FILE}
    echo -e "\t\t\t<type>1</type>" >> ${XML_FILE}
    echo -e "\t\t\t<locationURI>PARENT-2-WORKSPACE_LOC/${SRC_DIR}/${FW_DIR}${1}</locationURI>" >> ${XML_FILE}
    echo -e "\t\t</link>" >> ${XML_FILE}
}

process_dir() {
    local -a subdirs=()
    echo "Process and Append Path: ${1}"
    echo_dir "${1#"$SRC_PATH"}"

    # Scan the directory, processing files and collecting subdirs
    for file in "$1"/*; do
        if [[ -f "$file" && ${file: -3} != ".ld" ]]; then
            echo "Process and Append File: ${file}"
            echo_file "${file#"$SRC_PATH"}"
        elif [[ -d "$file" ]]; then
            subdirs+=("$file")
            # If you don't care about processing all files before subfolders, just do:
            # process_dir "$file"
        fi
    done

    # Now go through the subdirs
    for d in "${subdirs[@]}"; do
        process_dir "$d"
    done
}

ask() {
    # https://djm.me/ask
    local prompt default reply

    if [ "${2:-}" = "Y" ]; then
        prompt="Y/n"
        default=Y
    elif [ "${2:-}" = "N" ]; then
        prompt="y/N"
        default=N
    else
        prompt="y/n"
        default=
    fi

    while true; do
        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo -n "$1 [$prompt] "

        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read reply </dev/tty

        # Default?
        if [ -z "$reply" ]; then
            reply=$default
        fi

        # Check if the reply is valid
        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac
    done
}

### GET METADATA AND CHECK ###
# This script will create a temporary xml file with this name
TEMP_XML="./temp.xml"
TEMP_DPJ="./temp.project"

# Firmware directory name, should be fw
FW_DIR="${SRC_PATH##*/}"

# Firmware directory's parent directory name
SRC_DIR="${SRC_PATH%"/$FW_DIR"}"
SRC_DIR="${SRC_DIR##*/}"

# See if any XSA file exist
echo "Looking for .xsa file generated by Vivado."
lines=$(find ${VIVADO_PATH} -name "*.xsa" | wc -l)
if [ $lines -eq 1 ]; then
    echo -e "Found one .xsa file.\n"
elif [ $lines -eq 0 ]; then
    echo "Did not find any .xsa file! Generate one from vivado first."
    exit 1
else
    echo "Found too many .xsa files. Please only keep one."
    exit 1
fi

# XSA file path
XSA_PATH=$(find ${VIVADO_PATH} -name "*.xsa")
echo -e "Using ${XSA_PATH} to create project.\n"

# Get Project Name
PRJ_NAME="${XSA_PATH%".xsa"}"
PRJ_NAME="${PRJ_NAME##*/}"

## CREATE TEMP XML FILE ##
echo "Creating temporary xml file ${TEMP_XML} from files in ${SRC_PATH}"
declare -r XML_FILE=${TEMP_XML}
[ -f ${XML_FILE} ] && : > ${XML_FILE}
# Echo the linked resource section flag
echo -e "\t<linkedResources>" >> ${XML_FILE}
# Process directory and all subfiles
process_dir "${SRC_PATH}"
# Echo the end of linked resource section flag
echo -e "\t</linkedResources>" >> ${XML_FILE}
echo ""

## GENERATE VITIS PROJECT ##
echo "Generate Vitis project in: ./${PRJ_NAME}"
xsct create_vitis_project.tcl --project_name ${PRJ_NAME} --vivado_dir ${XSA_PATH%/*} --source_dir ${SRC_PATH}
echo -e "\nFinish generating Vitis project.\n"

## CREATE SOURCE LINK ##
# Find the .project file
echo "Looking for .project file in generated project."
PRJ_FILE=$(find ./${PRJ_NAME}/${PRJ_NAME} -name ".project")
echo -e "Found .project file: ${PRJ_FILE}\n"
echo -e "Updating file link.\n"

# Append Temporary XML File to the .project File, before </projectDescription>
lines=$(grep -n '</projectDescription>' ${PRJ_FILE} | cut -d ":" -f 1)
{ head -n $(($lines-1)) ${PRJ_FILE}; cat ${TEMP_XML}; tail -n +$lines ${PRJ_FILE}; } > ${TEMP_DPJ}
mv ${TEMP_DPJ} ${PRJ_FILE}
echo -e "File linking finished.\n"

## CLEAN UP ##
echo -e "Cleaning up.\n"
# Remove temp files
rm ${TEMP_XML}

# Remove source in Vitis project
mv ./${PRJ_NAME}/${PRJ_NAME}/src/*.ld .
rm -rf ./${PRJ_NAME}/${PRJ_NAME}/src
mkdir ./${PRJ_NAME}/${PRJ_NAME}/src
mv ./*.ld ./${PRJ_NAME}/${PRJ_NAME}/src

# Add symlink to linker script(s) if present
shopt -s globstar nullglob
ldscripts=(${SRC_PATH}/**/*.ld)
if [[ ! -z ${ldscripts} ]]; then
    echo "Adding user-provided linker script(s)."

    # Delete existing project linker scripts
    rm -f ./${PRJ_NAME}/${PRJ_NAME}/src/*.ld

    for f in ${ldscripts[@]}; do
        # Create symlink
        ln -s ../../../"${f}" ./${PRJ_NAME}/${PRJ_NAME}/src/
    done
fi

echo -e "Vitis project creation complete.\n"

if ask "Do you want to open Vitis IDE?" N; then
    vitis -workspace ./${PRJ_NAME} &
fi
